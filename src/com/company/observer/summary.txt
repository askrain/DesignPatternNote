观察者模式（订阅模式）：是一种使用率非常高的模式，最常用的地方就是GUI系统、订阅--发布系统。这个模式的重要作用就是
解耦。将观察者和被观察者解耦，是的他们之间的依赖变小

定义：
定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并更新

使用场景：
1.关联行为场景，关联行为是可拆分的
2.事件多级触发场景
3.跨系统的消息交换场景，如消息队列、事件总线的处理机制

模型：
Subject  抽象主题，也就是被观察者Observable角色。抽象主题角色把所有观察者Observer的引用保存
在一个集合中，每个主题都有任意数量的观察者，抽象主题提供统一的接口，可以增加和删除观察者对象

ConcreteSubject 具体主题，该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生变化时，给所有
注册过的观察者发出通知，具体主题角色又叫具体被观察者（ConcreteObservable）

Observer 抽象观察者 ，定义了一个更新的接口，使得在接到主题的更改通知时能更新自己

ConcreteObserver 具体的观察者 实现了抽象观察者所定义的更新接口，以便在主题的状态发生变化的时候
更新自己的状态


Observer 和 Observable 是JDK中的内置类型
Observer是抽象的观察者，是个接口
Observable 是个抽象的被观察者

安卓中订阅模式的运用：
1.BaseAdapter implements ListAdapter ,SpinnerAdapter  是个观察者模式
是个被观察者，当notifyDataSetChanged()调用的时候，内部调用了DataSetObservable的notifyChanged()
2.BroadcastReceiver 是应用内进程间通信的重要手段。也是个观察者模式
3.日常用的事件总线