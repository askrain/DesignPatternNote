代理模式Proxy Pattern，也称委托模式，是结构型设计模式所讲的第一个模式
常见的例子：代理上网、帮忙买饭、请律师打官司

定义：
为其他对象提供一种代理以控制对这个对象的访问

使用场景：
当无法或者不想直接访问某个对象或者访问某个对象存在困难时，可以通过一个代理对象来间接访问，为了保证客户
端使用的透明性，委托对象与代理对象需要实现相同的接口

模型：
Subject 抽象主题类，主要职责是声明真实主题和代理的共同接口方法，该类既可以是一个抽象类也可以是一个接口

RealSubject 真实主题类 即被代理类，被委托类，该类定义了代理所表示的真实对象，由其执行具体的业务逻辑方法
而客户类则是通过代理类间接地调用真实主题类中定义的方法

ProxySubject  代理类，也成为委托类或者代理类。该类持有对真实主题类的引用，在其所实现的接口方法中调用真实
主题类中相应的接口方法执行，以此起到代理的作用

Client 客户类，即使用代理类的类型

代理模式的实质：
就是一种委托机制。真实对象将方法的执行委托给代理对象，而且委托得干净利落毫不做作。


代理分类：

静态代理：
代理者的代码由程序员自己或者通过一些自动化工具生成固定的代码再对其进行编译，也就是说我们的代码运行前
代理类的class文件已经存在

动态代理：通过反射机制动态地生成代理者对象，也就是说我们在code阶段压根不知道代理谁，代理谁我们将在
执行阶段决定。Java为我们提供了一个便捷的动态代理接口InvocationHandler,实现该接口，需要重写其调用
方法invoke()  。也就是说原来有代理者所做的工作现在由InvocationHandler来处理。不再需要关心到底
代理谁

动态代理的优势：
通过一个代理类来代理N多个被代理类，其实质是对代理者和被代理者进行解耦，使两者没有直接的耦合关系，即
动态代理和被代理者不必都实现相同的接口
但静态代理更符合面向对象的原则

从适用范围来分：
1.远程代理
2.虚拟代理
3.保护代理
4.智能引用

Android源码中的代理模式的实现：
1.ActivityManagerService(被代理类，ActivityManagerNative的子类) ActivityManagerProxy
(代理类)
，两者都实现了IActivityManager接口。IActivityManager 继承于IInterface接口，里面定义了
Activity中的相关方法。代理者和被被代理者之间的通信是通过Binder机制来实现的

AIDL通信方式的诞生：
Binder由binderClient、binderServer、ServerManager和BinderDriver组成，对于底层的BinderDriver
和ServerManager来说我们没有必要去实现，因为这部分逻辑android已经给我们封装的很好了，这也是最复杂的一部分逻辑。
我们只需要实现BinderClient和BinderServer即可。BinderServer的部分代码再C中实现，逻辑很复杂。
为了帮助应用开发者编写BinderServer,android提供了一种新的方式来生成BinderServer端。这种方式就是
AIDL Android Interface Description Language ,即安卓接口描述语言。经典的例子就是银行开户、存钱
取钱、销户的例子

2.四种不同的Notification适配：抽象出主题，在构造方法中构建builder ，设置抽象send和cancel方法
四种不同的通知继承于这个抽象类，实现各自的构建和发送及取消的方法 。在代理类中持有抽象主题的引用，在构造的
时候根据版本的不同，实例化不同的Notification子类。在activity中直接使用代理类的发送和取消的方法

针对Notification的例子,可以使用装饰者模式继续优化


有些模式单独作为一种模式，可以说是对代理模式的一种针对性优化
