中介者模式 Mediator Pattern
即调解者模式或调停者模式。
房产中介调解房东和买房者直接的各种矛盾
而实际开发中的中介者模式类似于APP开发过程中，代表各个模块作出最终决定的人
每一个中介者都会知道所有的同事，比如软件开发领域的运维、产品、开发、设计还有测试。但这些同事相互
不认识，中介者不属于同事的任何一方，也不偏袒任何一方。


定义：
中介者模式包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用。从而使它们可以松散耦合。当某些
对象之间的作用发生改变时，不会立即影响其他的一些对象的相互作用。保证这些作用可以彼此独立的变化。中介者模式
将多对多的相互作用转化为一对多的相互作用。中介者模式将对象的行为和协作抽象化，把对象在小尺度的行为上与
其他对象的相互作用分开处理

使用场景：
当对象之间的交互操作很多，且每个对象的行为操作都依赖彼此时，为防止在修改一个对象的行为时，同时涉及
修改很多其他对象的行为。可以采取中介者模式，来解决紧耦合问题。该模式将对象间的多对多关系变成一对多的关系。
中介者对象将系统从网状结构变成以调停者为中心的星结结构，达到降低系统复杂性，提高可扩展性的作用。

模型：
Mediator  抽象中介者  ，定义了同事对象到中介者对象的接口，一般以抽象类的方式实现
ConcreteMediator 具体中介者角色，继承抽象中介者。实现了父类定义的方法。它从具体的同事对象接收
消息，向具体同事对象发出命令
Colleague  抽象同事类角色，定义了中介者对象的接口，它只知道中介者而不知道而他同事类
ConcreteColleagueA/B 具体同事类角色，继承抽象同事类，每一个具体同事类都知道本身在小范围内的行为
而不知道它在大范围内的目的

具体的例子：
电脑由CPU、内存、显卡、IO设备构成，但只有起中介者作用的主板，才能连接CPU、内存、显卡和IO设备。任何
两个模块之间的通信都会经过主板去协调，这里以读取光盘为例。
中介者模式就是用来协调多个对象之间的交互的，就像上面实例中主板，如果没有主板这个中介者
那么电脑里的每一个零部件都需要与其他零部件建立关联，这样一来就会形成一个复杂的网状图，而中介者模式的出现则
是将这一个错综复杂的网状图变成一个结构清晰的星形图，其中心就是中介者


Android源码中的中介者模式的实现：

1.KeyGuard 锁屏的功能实现
2.Binder机制  用来绑定不同的系统级服务并进行跨进程通信
3.登陆界面的各种验证 即在EditText、CheckBox的状态变化的回调中，调用同一的change()函数，在这个函数中
根据状态变化条件，做不同的逻辑操作


总结：适当地使用中介者模式可以对这种依赖关系进行解耦使逻辑结构清晰，但是如果几个类间的依赖关系并不复杂
使用中介者模式反而会使得原本不复杂的逻辑结构变得复杂