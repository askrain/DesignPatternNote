原型模式：

它是一个创建型模式。原型表明该模式应该有一个样板实例。用户从这个样板实例中复制出一个内部属性一直的对象，即克隆。
被复制的对象就是“原型”。

目的：原型模式定义用于创建复杂的或者构造耗时的实例，复制一个已经存在的实例可以使程序运行更加高效


使用场景：
1.类初始化需要消耗很多资源，这个资源包括数据、硬件资源等。通过原型拷贝避免消耗
2.通过new产生一个对象需要非常繁琐的数据准备或者访问权限，原型模式可以避免
3.提供保护性拷贝

注意：通过实现Cloneable接口的原型模式在调用clone函数构造实例时并不一定比通过new操作更快，只有当通过new操作更
耗时或者消耗资源的时候，通过clone方法才能获得效率上的提升。因此使用的时候要做比较

角色介绍：
Client  客户端用户
Prototype 抽象类或者接口 生命具备clone的能力
ConcretePrototype 具体的原型类

注意clone方法并不是Cloneable接口中的，它是一个标识接口，表明这个类是可以拷贝的。而具体的拷贝来自于Object
的clone（）。没有生命这个接口的类调用了clone（）会报错

通过clone拷贝对象，并不会执行其构造方法

浅拷贝和深拷贝：
浅拷贝：原始类型的字段根据原数据重新构建，引用类型数据直接指向原数据的引用
深拷贝：对于引用类型的数据，拷贝对象的时候，也要采用拷贝的形式。不能是单纯的引用


优点：是在内存中的二进制流的拷贝，要比直接new一个对象性能更好，特别是在一个循环体内需要产生大量对象的时候，
        原型模式更能体现其优点
缺点：直接在内存中拷贝，构造函数不执行

安卓中的应用：ArrayList  Intent的查找和匹配。注意此处Intent的拷贝用的是new 方法
