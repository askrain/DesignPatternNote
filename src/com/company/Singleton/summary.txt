实现单例模式的方法：
1.饿汉式
2.懒汉式
3.Double Check Lock
4.静态内部类
5.枚举
6.容器管理


定义：确保某个类只有一个实例，并且自行实例化并向整个系统提供这个实例

使用场景：确保某个类有且只有一个对象的场景，避免产生多个对象，消耗过多的资源。创建一个对象需要消耗很多资源，如访问IO和数据库等资源

关键点：
1.构造方法私有
2.通过静态方法或者枚举返回单例对象
3.确保单例对象的类只有一个。尤其在多线程情况下
4.确保单例类对象在反序列化时不会重新构建对象

反序列化可以通过特殊途径取创建一个新的实例，相当于调用该类的构造方法。使用如下方法可以是开发人员控制反序列化

private Object readResolve() throws ObjectStreamException {
        return singleton;
    }

安卓源码中的单例模式：LayoutInflater
安卓系统中，经常通过Context获取系统级别的服务，如WindowsManagerService、ActivityManagerService等。这些服务会在合适的时候以单例模式的形式注册在系统中
。使用的是容器的方式。需要的时候通过Context.getSystemService(String name)获取相关的服务实例。

另外著名的ImageLoader框架Universal-Image-Loader使用的是DCL形式的单例模式

总结：
1.由于客户端通常没有高并发的情况，所以选择哪种单例方式并没有太大影响。出于效率考虑，推荐DCL和静态内部类的实现模式
2.单例模式如果持有Context，那么容易引发内存泄漏。所以使用的Context最好是ApplicationContext