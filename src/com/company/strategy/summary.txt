策略模式：
实现某一个功能可能有多种算法或者策略，我们根据实际情况选择不同的算法或者策略来完成该功能
。如果将这些算法或者策略抽象出来，提供统一的接口，不同的算法或者策略有不同的实现类，这样
在程序客户端就可以通过注入不同的实现对象来实现算法或者策略的动态替换，这种模式的客扩展性
可维护性也就更高，即为策略模式

定义：
定义了一系列算法，并将每一个算法封装起来，而且使他们还可以相互替换。策略模式让算法独立于使用
它的客户而独立存在

场景：
1.针对同一类型问题有多种处理方式，仅仅是具体行为有差别时
2.需要安全地封装多种同一类型的操作时
3.出现同一抽象类有多个子类，而又需要使用if-else或者switch-case 来选择具体子类的时候

模型：
1.Context 用来操作策略的上下文
2.Strategy 策略或者算法的抽象  ，是个接口
3.ConcreteStrategyA ConcreteStrategyB
