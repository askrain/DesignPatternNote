迭代器模式：
Iterator Pattern ,又称游标（Cursor）模式,是行为型设计模式之一，它是一个古老的设计模式。
源于对容易的访问，比如List、Map和数组等。

定义：
提供一种方法顺序访问一个容易对象中的各个元素，而又不需要暴露该对象的内部表示

使用场景：
遍历一个容器对象时

模型：
Iterator 迭代器接口  负责定义、访问和遍历元素的接口
Concrete Iterator 具体迭代器类 实现遍历器接口，并记录遍历当前的位置
Aggregate 容器接口 负责提供创建具体迭代器角色的接口
Concrete Aggregate 具体容器类 具体迭代器角色和该容器相关联
Client 客户类

迭代器这个设计模式，对于开发者来说基本不需要开发者自己去实现，就安卓来讲，除了各种数据结构体
list、map等所包含的迭代器外，Android自身源码中也为我们提供了迭代器便利数据

最典型的例子是：Sqlite 数据库的Cursor,该对象的实质就是一个 具体的迭代器

优点：
支持以不同的方式去遍历一个容器对象，也可以有多个遍历，弱化了容器类与遍历算法之间的关系
缺点 ：类文件的增加