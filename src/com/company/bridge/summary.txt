桥接模式 Bridge Pattern，是结构型设计模式之一

定义：
将抽象部分和实现部分分离，使他们都可以独立地进行变化

使用场景：
1.连接抽象部分和实现部分
2.任何多维度变化类或者说多个树状类之间的耦合都可以使用桥接模式实现解耦v
3.一个系统需要在构建的抽象角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的
继承联系，可以使用桥接模式使它们在抽象层建立一个关联关系
4.一个类存在两个独立变化的维度，而且这两个维度都需要进行扩展

Abstraction 抽象部分
该类保持一个对实现部分对象的引用，抽象部分中的方法需要调用实现部分对象的方法来实现，该类一般是抽象类

RefinedAbstraction  优化的抽象部分
抽象部分的具体实现，一般是对抽象部分的方法进行完善和扩展

Implementor 实现部分，可以为抽象或者接口，其方法不一定要与抽象部分中的一致，一般情况下是由
实现部分提供基本的操作

咖啡中的例子：大杯和小杯 原味和加糖，相对于对方都是独立存在的，两者之间的唯一交集就是
Coffee中保持了对CoffeeAdditives的引用，这就是两者之间的纽带，即桥接模式

Android中的实现：
1.View 及其子类 CheckBox CompoundButton Button之间构成了继承关系的视图层级，但是将他们绘制
到屏幕上则是DisplayList HardwareLayer Canvas负责的
2.Adapter和 AdapterView之间
3.Window 和WindowManager之间

安卓中的framework的构成：
1.wms 对窗口的管理，对事件的管理和分发
2.ams
3.view

总结：
在实际的应用中，使用的并不多。原因在于 抽象与实现分离的把握
缺点：不容易设计，需要经验要求
优点：
分离抽象与实现，灵活的扩展，对用户透明的实现


